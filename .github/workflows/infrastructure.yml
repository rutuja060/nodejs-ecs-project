name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure.yml'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: us-east-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan -out=tfplan
        terraform show -no-color tfplan > tfplan.txt
      continue-on-error: true
    
    - name: Comment Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan üìù
          \`\`\`\n
          ${process.env.PLAN || 'No changes. Infrastructure is up-to-date.'}
          \`\`\`
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event.inputs.action == 'apply'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
    
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd terraform
        terraform destroy -auto-approve
      continue-on-error: true 