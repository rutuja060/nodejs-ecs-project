name: CI/CD Pipeline with CodeDeploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: nodejs-ecs-project
  APPLICATION_NAME: nodejs-app
  DEPLOYMENT_GROUP_NAME: nodejs-app-deployment-group

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Generate image tag
      id: image-tag
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
    
    - name: Save image tag for deployment
      run: echo "${{ steps.image-tag.outputs.tag }}" > image-tag.txt

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download image tag
      run: |
        aws s3 cp s3://${{ secrets.S3_BUCKET }}/image-tag.txt ./image-tag.txt || echo "latest" > image-tag.txt
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r scripts deployment/
        cp -r terraform deployment/
        cp appspec.yml deployment/
        cp image-tag.txt deployment/
        tar -czf deployment-package.tar.gz deployment/
    
    - name: Upload deployment package to S3
      run: |
        aws s3 cp deployment-package.tar.gz s3://${{ secrets.S3_BUCKET }}/deployments/ --sse AES256
        aws s3 cp image-tag.txt s3://${{ secrets.S3_BUCKET }}/ --sse AES256
    
    - name: Create CodeDeploy deployment
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.APPLICATION_NAME }} \
          --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=${{ secrets.S3_BUCKET }},key=deployments/deployment-package.tar.gz,bundleType=tar \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --description "Deployment from GitHub Actions - ${{ github.sha }}"
    
    - name: Wait for deployment to complete
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments \
          --application-name ${{ env.APPLICATION_NAME }} \
          --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
          --max-items 1 \
          --query 'deployments[0]' \
          --output text)
        
        echo "Waiting for deployment $DEPLOYMENT_ID to complete..."
        aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
        
        if [ $? -eq 0 ]; then
          echo "Deployment completed successfully!"
        else
          echo "Deployment failed!"
          exit 1
        fi

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Rollback deployment
      run: |
        echo "Deployment failed, initiating rollback..."
        aws deploy create-deployment \
          --application-name ${{ env.APPLICATION_NAME }} \
          --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
          --revision revisionType=S3,s3Location={bucket=${{ secrets.S3_BUCKET }},key=deployments/previous-deployment.tar.gz,bundleType=tar} \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --description "Rollback deployment due to failure" 